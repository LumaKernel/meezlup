# イベント作成機能実装の懸念事項

## 完了内容
- イベント作成ページのルーティング設定
- イベント作成フォームコンポーネントの実装
- Effect Schemaによるフォームバリデーション
- Server Actionでのイベント作成処理
- 作成後のリダイレクトとURL共有機能
- エラーハンドリングとユーザーフィードバック
- Temporal統合によるDate型の置き換え

## 残課題・懸念事項

### 1. テスト未実装
- イベント作成フォームのテストが未実装
- Temporal.PlainDateを使用したコンポーネントのテスト方法の検討が必要

### 2. パーミッション設定の制限
- 現在は"public", "private", "link-only"の3種類のみ
- "link-only"の実装が"none"(public)として処理されている
- 将来的にドメイン制限や特定ユーザー制限の実装が必要

### 3. 時間帯の扱い
- 現在はPlainDateを使用しているため、時刻情報が考慮されていない
- 開始時刻を00:00:00、終了時刻を23:59:59に固定している
- 将来的にはTemporal.PlainDateTimeやZonedDateTimeの使用を検討

### 4. イベント参加ページ未実装
- `/events/[id]/participate`ページが未実装
- 参加者がイベントに参加するフローが未完成

### 5. maxParticipants未使用
- フォームで入力されるmaxParticipantsがEventServiceで未使用
- データベーススキーマとの不一致の可能性

### 6. Mantine DatePickerとTemporalの統合
- DatePickerInputはDate型を返すため、Temporal.PlainDateへの変換が必要
- toISOString().split('T')[0]による変換は一時的な解決策
- タイムゾーンの考慮が必要（現在はUTCで固定）

### 7. フォームの状態管理
- useStateによる単純な状態管理を使用
- 将来的にはreact-hook-formやMantine formの使用を検討
- リアルタイムバリデーションの実装が未完成

### 8. エラーメッセージの国際化
- エラーメッセージが日本語でハードコーディングされている
- i18nシステムとの統合が必要
- Schema.filterのメッセージも国際化対応が必要

### 9. Server Actionのエラーハンドリング
- ParseErrorを含む包括的なエラーハンドリングを実装
- しかし、具体的なフィールドエラーの表示が未実装
- クライアント側でのフィールド別エラー表示の改善が必要

### 10. イベント一覧のパフォーマンス
- 全イベントを一度に取得している
- ページネーションやインフィニットスクロールの実装が必要
- 検索・フィルター機能の追加を検討

### 11. URL共有機能のセキュリティ
- 現在は単純なURLパスベースの共有
- 将来的にはセキュアなトークンベースの共有を検討
- link-onlyイベントのアクセス制御実装が必要

### 12. データベーストランザクション
- イベント作成時のトランザクション管理が不明確
- 関連データ（スケジュール等）の同時作成時の整合性保証が必要

### 13. UIの改善点
- ローディング状態の表示が最小限
- フォーム送信後のフィードバックが簡素
- 日付選択UIのカスタマイズ余地あり

### 14. アクセシビリティ
- ARIAラベルの追加が必要
- キーボードナビゲーションのテストが未実施
- スクリーンリーダー対応の確認が必要

### 15. 型安全性の向上余地
- satisfies演算子を多用しているが、より厳密な型定義が可能
- Branded型の活用をさらに進められる
- Effect.tsの機能をより活用できる部分がある

### TODOコメント
- なし（コード中にTODOコメントは記載していない）

## 技術的負債
1. **Temporal統合の不完全性**
   - Date型との相互変換が頻繁に発生
   - Mantine UIライブラリがTemporalに未対応
   - ポリフィルに依存している状態

2. **Effect.tsの部分的な活用**
   - Layerパターンの恩恵を完全に受けていない
   - エラーハンドリングの一貫性に改善余地
   - Dependency Injectionの活用が限定的

3. **コンポーネントの責務分離**
   - EventCreateFormが多くの責務を持ちすぎている
   - ビジネスロジックとUIロジックの混在
   - カスタムフックへの抽出が可能

## 推奨される次のステップ
1. **優先度：高**
   - イベント参加ページの実装
   - イベント作成フォームのテスト実装
   - パーミッション設定の完全な実装

2. **優先度：中**
   - 時間帯の詳細設定機能の追加
   - エラーメッセージの国際化
   - フォームバリデーションの改善

3. **優先度：低**
   - UIの改善とアクセシビリティ対応
   - パフォーマンス最適化
   - リファクタリング（コンポーネント分割等）

## 実装時の判断根拠
- **Temporal採用理由**: 日付計算の正確性とタイムゾーン処理の簡潔性
- **Effect.ts採用理由**: 型安全なエラーハンドリングと関数型プログラミング
- **Mantine UI採用理由**: 豊富なコンポーネントと良好なDX
- **Server Actions採用理由**: Next.js 14の推奨パターンとシンプルなAPI

## 監視すべきメトリクス
- イベント作成の成功率
- フォームのエラー発生率
- ページロード時間
- Server Actionの実行時間